{# reports/template.md.j2 - FINAL PROFESSIONAL VERSION #}
{% set audit_details = report.audit_details %} 
{% set final_score = report.final_score %}     
{% set crawled_pages = report.crawled_pages %} 
{% set audit_level = audit_details.audit_level %}
{% set audit_scope = audit_details.audit_scope %}
{% set current_time = now().strftime('%Y-%m-%d %H:%M:%S') %}

# üíé PROFESSIONAL SEO AUDIT REPORT

## 1. Executive Summary: {{ audit_details.target_url }}

| Metric | Value | Status |
| :--- | :--- | :--- |
| **Audit Date** | {{ current_time }} | |
| **Final SEO Score** | **{{ final_score }}/100** | {{ 'Excellent' if final_score >= 85 else ('Good' if final_score >= 60 else 'Needs Immediate Attention') }} |
| **Total Pages Crawled** | **{{ crawled_pages | length }}** | |
| **Audit Scope** | **{{ audit_scope | replace('_', ' ') | capitalize }}** | The scan focused on {{ 'the homepage only' if audit_scope == 'only_onpage' else 'core index pages'}}. |

---

## 2. Site-Wide Issue Aggregation

This section summarizes critical failures across all **{{ crawled_pages | length }}** audited pages.

{# CRITICAL FIX: Use namespace for mutable counters inside the loop #}
{% set ns = namespace(
    title_fail_count=0, 
    desc_fail_count=0, 
    h1_fail_count=0, 
    thin_content_count=0, 
    missing_alt_total=0,
    total_issues=0
) %}

{% set issue_data = {
    'title_fail': {'count': 0, 'priority': 'High', 'description': 'Pages with missing, too short, or too long Title Tags (Optimal: 30-60 chars).', 'solution': 'Review and rewrite page titles to accurately reflect content and include primary keywords.'},
    'desc_fail': {'count': 0, 'priority': 'High', 'description': 'Pages missing a Meta Description (Essential for click-through rate in SERPs).', 'solution': 'Add unique, compelling meta descriptions (120-158 characters) that encourage users to click.'},
    'h1_fail': {'count': 0, 'priority': 'Medium', 'description': 'Pages with zero or more than one H1 heading (Should be exactly one H1 per page).', 'solution': 'Ensure every critical page has a single H1 tag containing the page\'s main topic keyword.'},
    'thin_content_count': {'count': 0, 'priority': 'Medium', 'description': 'Pages with low word count (< 200 words), potentially seen as low-value or thin content.', 'solution': 'Expand the content on these pages to provide greater detail and better user value.'},
    'missing_alt_total': {'count': 0, 'priority': 'Low', 'description': 'Total images across all pages missing descriptive ALT text (A key accessibility and SEO factor).', 'solution': 'Add descriptive ALT text to all images to improve accessibility and help search engines understand image content.'}
} %}

{% for page in crawled_pages %}
    {# Accumulate counts in the namespace object #}
    {% set ns.missing_alt_total = ns.missing_alt_total + page.get('images', {}).get('missing_alt', 0) %}
    
    {% if page.get('meta', {}).get('title')|length < 30 or page.get('meta', {}).get('title')|length > 65 %}
        {% set ns.title_fail_count = ns.title_fail_count + 1 %}
    {% endif %}
    {% if not page.get('meta', {}).get('description') %}
        {% set ns.desc_fail_count = ns.desc_fail_count + 1 %}
    {% endif %}
    {% if page.get('headings', {}).get('h1', 0) != 1 %}
        {% set ns.h1_fail_count = ns.h1_fail_count + 1 %}
    {% endif %}
    {% if page.get('content', {}).get('word_count', 0) < 200 %}
        {% set ns.thin_content_count = ns.thin_content_count + 1 %}
    {% endif %}
{% endfor %}

{# After the loop, update the original issue_data dictionary for output #}
{% set _ = issue_data.title_fail.update({'count': ns.title_fail_count}) %}
{% set _ = issue_data.desc_fail.update({'count': ns.desc_fail_count}) %}
{% set _ = issue_data.h1_fail.update({'count': ns.h1_fail_count}) %}
{% set _ = issue_data.thin_content_count.update({'count': ns.thin_content_count}) %}
{% set _ = issue_data.missing_alt_total.update({'count': ns.missing_alt_total}) %}

### Top Site-Wide Issues Found

| Issue | Total Count | Priority |
| :--- | :--- | :--- |
{% for key, item in issue_data.items() %}
    {% if item.count > 0 %}
    {# FINAL FIX APPLIED HERE: Wrap the complex expression in parentheses #}
    | **{{ (item.description | split('('))[0] | trim }}** | **{{ item.count }}** | {{ item.priority }} |
        {% set ns.total_issues = ns.total_issues + item.count %}
    {% endif %}
{% endfor %}
| **Total Aggregated Issues** | **{{ ns.total_issues }}** | |

---

## 3. Core Technical Health Check (3/18 Checks)

| Check | Status | Details |
| :--- | :--- | :--- |
| **SSL/HTTPS** | **{{ '‚úÖ Valid HTTPS' if report.basic_checks.ssl_check.valid_ssl else '‚ùå Missing or Invalid' }}** | {{ 'The site uses a valid certificate for secure connection.' if report.basic_checks.ssl_check.valid_ssl else report.basic_checks.ssl_check.error or "SSL is missing. HIGH PRIORITY FIX." }} |
| **Robots/Sitemap** | **{{ '‚úÖ OK' if 'found' in report.basic_checks.robots_sitemap['robots.txt'] and 'found' in report.basic_checks.robots_sitemap['sitemap.xml'] else '‚ö†Ô∏è Check Files' }}** | **robots.txt:** {{ report.basic_checks.robots_sitemap['robots.txt'] }}; **sitemap.xml:** {{ report.basic_checks.robots_sitemap['sitemap.xml'] }}. |
| **Server Response Time** | **{{ report.performance_check.desktop_score.result | capitalize }}** | Time: **{{ report.performance_check.response_time_ms }}ms**. {{ report.performance_check.desktop_score.message }} |

---

## 4. Actionable Solutions for Key Issues

This section provides clear, human-readable solutions for the issues summarized in Section 2.

{% for key, item in issue_data.items() %}
    {% if item.count > 0 %}
### üí° Issue: {{ (item.description | split('('))[0] | trim }} ({{ item.count }} Instances)
* **Description:** {{ item.description }}
* **Priority:** **{{ item.priority }}**
* **Solution:** {{ item.solution }}
    {% endif %}
{% endfor %}

---

## 5. Detailed Page-by-Page Audit ({{ crawled_pages | length }} Pages)

{% for page in crawled_pages %}
### üìÑ Page {{ loop.index }}: `{{ page.url }}` (Status: {{ page.status_code }})

| Metric | Check Name | Status | Details |
| :--- | :--- | :--- | :--- |
| **Meta** | Title Tag Length | {{ '‚úÖ OK' if page.meta.title|length >= 30 and page.meta.title|length <= 65 else '‚ùå FAIL' }} | **Title:** {{ page.meta.title or "MISSING" }} (Length: {{ page.meta.title|length if page.meta.title else '0' }}) |
| **Meta** | Meta Description | {{ '‚úÖ OK' if page.meta.description else '‚ùå MISSING' }} | **Description:** {{ page.meta.description or "MISSING" }} |
| **Structure** | H1 Count | {{ '‚úÖ OK' if page.headings.h1 == 1 else '‚ùå FAIL' }} | Found **{{ page.headings.h1 }}** H1 tags. Must be exactly 1. |
| **Content** | Word Count | {{ '‚úÖ OK' if page.content.word_count >= 200 else '‚ùå FAIL' }} | Found **{{ page.content.word_count }}** words. Thin content warning below 200. |
| **Technical** | Canonical Tag | {{ '‚úÖ Valid' if page.canonical.match else '‚ö†Ô∏è Check' }} | **Tag:** {{ page.canonical.canonical_url or 'N/A' }}. **Matches Page URL:** {{ 'Yes' if page.canonical.match else 'No/Missing' }}. |

{% if audit_level != 'basic' %}
#### Advanced Checks ({{ audit_level | capitalize }} Level)
- **Local SEO:** ({{ page.local_seo.nap_consistency.result }}) {{ page.local_seo.nap_consistency.message }}
- **Schema Markup:** ({{ page.schema.result }}) {{ page.schema.message }}
- **Mobile Friendly:** ({{ page.mobile.result }}) {{ page.mobile.message }}
{% endif %}

---
{% endfor %}
